package com.penpick.kakao.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.penpick.kakao.dto.KakaoLoginDTO;
import com.penpick.kakao.model.KakaoUser;
import com.penpick.kakao.repository.KakaoUserRepository;
import com.penpick.kakao.service.KakaoLoginService;

import jakarta.servlet.http.HttpSession;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
@RequestMapping("/api")
public class KakaoLoginControllerr {

	// 멤버(필드)변수
    private final KakaoUserRepository userRepository;
    private final KakaoLoginService kakaoLoginService;
    private final HttpSession httpSession;


    @PostMapping("/kakao-login")
    public ResponseEntity<String> handleKakaoLogin(@RequestBody KakaoLoginDTO kakaoLoginDTO, HttpSession session) {
    	
    	// 클라이언트에서 전송한 데이터를 받아와서 처리
        String accessToken = kakaoLoginDTO.getAccessToken();
        String email = kakaoLoginDTO.getEmail();
        String nickname = kakaoLoginDTO.getNickname();
        
        // 이미 저장된 사용자인지 확인
        Optional<KakaoUser> existingUser = userRepository.findByEmail(email);

        if(existingUser.isPresent()) {
        	
        	//이미 로그인한 사용자일 경우 세션에만 저장
            session.setAttribute("userId", existingUser.get().getId());
            session.setAttribute("email", email);
            session.setAttribute("nickname", nickname);
            
            return ResponseEntity.ok("카카오 로그인 성공");
        
        } else {
        	
        	// Kakao 로그인 정보 DB에 저장
            KakaoUser user = new KakaoUser();
            user.setAccessToken(accessToken);
            user.setEmail(email);
            user.setNickname(nickname);
            
            userRepository.save(user);
            
            //세션에 사용자 정보 저장
            session.setAttribute("userId", user.getId());
            session.setAttribute("email", email);
            session.setAttribute("nickname", nickname);
            
            return ResponseEntity.ok("카카오 회원가입 및 로그인 성공");
        }
        
    }
    
    @ResponseBody
    @GetMapping("/kakao-userdata")
    public ResponseEntity<KakaoUser> getSessionValues(HttpSession session) {
        
    	//세션에서 값 가져오기
        String email = (String) session.getAttribute("email");
       
        if(email != null) {
        	Optional<KakaoUser> userOptional = userRepository.findByEmail(email);
        	
        	if(userOptional.isPresent()) {
        		KakaoUser user = userOptional.get();
        		return ResponseEntity.ok(user);
        	}
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    }
    
}
